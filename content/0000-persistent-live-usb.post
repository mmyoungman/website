\title{Create a Bootable Encrypted External Disk with Arch Linux}
\author{Mark Youngman}
\date{2018}{12}{31}

\series{}

\tags{}
\categories{}

\begin{blurb}
\end{blurb}

\begin{document}

This guide shows you how to create an encrypted partition, install Arch Linux on that partition, and then allow you to boot it after entering a passphrase. We'll be using VirtualBox to make this guide OS agnostic. Not knowing any bash will make this harder to follow, but armed with a search engine and the Arch Linux wiki, you will find your way.


Quick capsule review: create two partitions, the first unencrypted to boot from, and the second encrypted with Linux and your files. We'll create the encrypted partition with cryptsetup, mount the bootable parition and the encrypted partition, install Arch, install Grub, check you can boot from it, and finally install whatever software you want, Window Manager and the like.


NOTE: This can be done on a USB stick, but flash drives aren't meant to be written to frequently. If you're only going to set up the installation and then boot from it for special occasions, then you might be okay. I'm assuming you're doing this on an external HDD or SSD.

\section{Get virtual machine running}

1. Download and install VirtualBox.


2. Download Arch Linux ISO.


3. Create new VirtualBox VM.

This is where the fun begins.


Create a new VM, with the OS "Arch Linux 64-bit" (although that probably doesn't matter). I gave it 2048MB of memory, and created a 4GB virtual hard disk.


Once created, right click on the VM and go to Settings -> Storage. Under "Controller: IDE" add the Arch Linux ISO as a CD.


4. Make sure the VirtualBox can detect your external storage.

Start the VM. In the VM's window, click Devices -> USB. You should see your external storage underneath "USB Settings...". If you don't, make sure you've got the VirtualBox extension pack installed. On Linux, I also needed to add my user to the "vboxusers" group and reboot.

\begin{blockquote}
sudo usermod -aG vboxusers $USER
\end{blockquote}

If you find yourself only able to create a 32-bit VM, you might need to enable "Intel Virtualization Technology" or the AMD equivalent in your BIOS.


5. Create paritions on external storage

a. Start the VM, and select "Boot Arch Linux (x86_64)".

b. Enter "lsblk" to see what letter you're device is -- I'm going to assume it's /dev/sdb.

c. Enter "cfdisk /dev/sdb". In cfdisk, delete any preexisting partitions (you should backup any data on it before this). Create one new 200M partition and make it bootable, then create another that uses the remaining free space. Write by entering "yes" and then quit. Use "lsblk" to verify the partitions have been created and note their associated numbers. I'm going to assume the 200M parition is /dev/sdb1 and the other is /dev/sdb2.

d. Format the 200M partition with "mkfs.ext4 /dev/sdb1".

e. Turn /dev/sdb2 into an encrypted parition with "cryptsetup -v -s 512 -h sha512 --use-random luksFormat /dev/sdb2". Make it accessible with "cryptsetup open /dev/sdb1 cryptroot". Type "lsblk" and you should see cryptroot appear under sdb1.

f. Format the encrypted partition with "mkfs.ext4 /dev/mapper/cryptroot"


6. Mount the partitions with "mount /dev/mapper/cryptroot /mnt && mkdir -p /mnt/boot && mount /dev/sdb1 /mnt/boot".


7. Install Arch 

a. Install the packages you want with "pacstrap -i /mnt base base-devel vim xfce4 networkmanager"

b. Generate file system table file with "genfstab -U -p /mnt >> /mnt/etc/fstab". "cat /mnt/etc/fstab" to verify it is created properly. It should look like [TODO].


8. Chroot into new installation to add settings

a. "arch-chroot /mnt"

b. "nano /etc/locale.gen" and remove the # from the lines you want -- the en_GB.UTF-8 line for me. Press ctrl+x and Y to quit and save. Then "locale-gen" and "echo LANG=en.UTF-8 > /etc/locale.conf" and "export LANG=en_GB.UTF-8".

c. Set timezone by "ls /usr/share/zoneinfo". To set to London, "ln -sf /usr/share/zoneinfo/Europe/London /etc/localtime" and then "hwclock --systohc --utc".




\section{Partition storage}

1. Use cfdisk



cfdisk /dev/sdb (create 100M boot and the rest for OS)
cryptsetup --verbose --cipher aes-xts-plain64 --key-size 512 --hash sha512 --use-random luksFormat /dev/sdb2
cryptsetup open --type luks /dev/sdb2 cryptroot
mkfs.ext4 /dev/sdb1
mkfs.ext4 /dev/mapper/cryptroot
mount /dev/mapper/cryptroot /mnt
mkdir -p /mnt/boot
mount /dev/sdb1 /mnt/boot

pacman -S arch-install-scripts
pacstrap -i /mnt base base-devel vim xfce4
genfstab -U -p /mnt >> /mnt/etc/fstab
cat /mnt/etc/fstab
arch-chroot /mnt

nano /etc/locale.gen
locale-gen
echo LANG=en_GB.UTF-8 > /etc/locale.conf
export LANG=en_GB.UTF-8

ln -sf /usr/share/zoneinfo/Europe/London /etc/localtime
hwclock --systohc --utc

echo [hostname] > /etc/hostnames
vim /etc/hosts (127.0.0.1	localhost)

passwd
useradd -m -g users -G wheel -s /bin/bash [username]
passwd [username]

pacman -S grub

sudo lsblk -no NAME,UUID /dev/sdb2
/etc/default/grub
GRUB_CMDLINE_LINUX="cryptdevice=/dev/disk/by-uuid/[UUID]:cryptroot"

nano /etc/mkinitcpio.conf
HOOKS="base udev block autodetect modconf encrypt filesystems keyboard fsck"

grub-install --recheck --removalbe --target=i386-pc /dev/sdb
grub-mkconfig -o /boot/grub/grub.cfg
mkinitcpio -p linux

umount /mnt/boot
umount /mnt
cryptsetup close cryptroot

lsblk
lsusb
qemu-system-x86_64 -cpu core2duo -cdrom archlinux-2018.12.01-x86_64.iso -boot order=d -usb -device nec-usb-xhci,id=xhci -device usb-host,bus=xhci.0,vendorid=0x1f75,productid=0x0917 -m 1G

\section{Format and Encrypt storage}

\section{Install OS on storage}

\section{Install bootloader}

The unfortunate thing is that I only managed to do it using Arch Linux.


Videos that helped me:
https://www.youtube.com/watch?v=eByfiPguY8A
https://www.youtube.com/watch?v=sDq1oaYRgeg


\end{document}
